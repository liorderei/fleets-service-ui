{"version":3,"sources":["fleets/fleets.js","devices/FleetInfo.js","devices/Devices.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","mypaper","background","FleetTable","classes","useState","rows","setRows","useEffect","loadData","a","fetch","headers","data","json","fleets","map","fleet","id","fid","name","description","healthy","stats","disabled","unregistered","totalDevices","Number","lastUpdated","lastUpdate","console","log","history","useHistory","style","marginLeft","fontSize","Grid","container","spacing","padding","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","key","onClick","push","goToFleet","scope","root","border","borderRadius","bullet","display","margin","transform","title","pos","marginBottom","FleetInfo","props","item","xs","Card","CardContent","Typography","variant","createData","endpoint","status","serialNumber","model","version","manufacturer","server","nextUpdate","tag","campaign","step","fotaStatus","App","path","location","state","method","body","JSON","stringify","numResults","devices","device","regStatus","deviceInfo","modelNumber","firmwareVersion","Button","update","Devices","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f09b5df.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    mypaper: {\r\n        background: \"gray\"\r\n    }\r\n});\r\n\r\nfunction createData(id, name, description, healthy, disabled, unregistered, totalDevices, lastUpdated) {\r\n    return {id, name, description, healthy, disabled, unregistered, totalDevices, lastUpdated};\r\n}\r\n\r\nexport default function FleetTable() {\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([]);\r\n    useEffect(() => {\r\n            loadData()\r\n        }, []\r\n    );\r\n\r\n    const loadData = async () => {\r\n        const data = await fetch(\"https://ao1x7zyaj7.execute-api.us-east-1.amazonaws.com/DefStage/fleets\", {\r\n            headers: {'authorization': 'eyJraWQiOiJcLzl5Zjh0MFJOUVV3R0VRM1BGRmdmcDZENzNVeEdJSW9mUkJQaW94bDNXST0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjZDJlZTZlNy03Y2Y3LTRkYTctYWM0OS0xYjNhMTcwYmEwMzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfWHFpcFRYdkUwIiwiY29nbml0bzp1c2VybmFtZSI6Imd1ZXN0IiwiYXVkIjoiY2lnYnBpNXU1b3A5YWNtZjQyNWp0M2dhcCIsImV2ZW50X2lkIjoiN2U5YzdmYmUtZTQ2Mi00NGZlLWE0M2YtZmJlMWFhMWUyNjAxIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1ODQwMjUyMDQsIm5hbWUiOiJHdWVzdCIsImFjY291bnRzIjoiMTI3IiwiZXhwIjoxNTg0MDI4ODA2LCJpYXQiOjE1ODQwMjUyMDYsImZhbWlseV9uYW1lIjoiT3BlbiIsImVtYWlsIjoiZ3Vlc3RAYWx0YWlyLXNlbWkuY29tIn0.MzubaZsihq2_p6xLKSvKcHrjrXdLGH16k3pPrshzpOy9WB2WEQTnDxPwBOz59SJsGx2LMKHqTCkmXBvxGPQN-zG1EQTJ420VVwilGfb-qxZ52ZGNVVK_S7w0VuU5fAiWkzf5Ugz5QVWp2dwj7bucnFQcr_JbMerfg-Z5lKZnExmy0F6dEhuvaJ_gybb7J2mrC8x9_caNgyrAH4j1JnCctN6Oum9svlouRBq6gewtXq-MyTlIRezcY3LRbr5NNDEIWBrCjLDK8QF4J2HZfpjkz_GXlt0zRraxpyyV7x7yjO8IUv9JrLdxfvTiW5gZ2A2y8AhDCBpj_XT-4-BljRWa-Q&publicKey=-----BEGIN%20PUBLIC%20KEY-----%0AMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwrxgjV8VAYzUUZ%2FqVLs4%0Ahm7bGW1Z9DVNW0vhW3nzgTLamPJPfTURU7xsviu6ew%2B3cDMXZdsOpFBXLL4c6Hm6%0Ae0JYRLKREVbdJlVOasFN4%2B4UZkJ5NCvU8ez9j7VP1tIsVBeZRRJNKyUaGp9MdZ0K%0Atk2YHlAbOtx73O5P7v7E8TgdEprEM43J%2BYcXFu6AeYbsGgvmH2KJMP8bfJyj8ynB%0A%2FvyC%2BfrjTIwVlYfREeAknVY7w4Q96TB2UKLO6PbI%2Bt6opoZzUPjlDDRarDCRvjtc%0AJiWvInoirMrATJ%2BK5G4ozquoL6FddYANbEa5Qgd57SW%2FBDOcNUM0xudKp3pbpOma%0AKwIDAQAB%0A-----END%20PUBLIC%20KEY-----%0A'}\r\n        });\r\n        let fleets = await data.json();\r\n        fleets = fleets.map(fleet => createData(fleet.fid, fleet.name, fleet.description, fleet.stats.healthy, fleet.stats.disabled, fleet.stats.unregistered, Number(fleet.stats.healthy) + Number(fleet.stats.disabled) + Number(fleet.stats.unregistered), fleet.stats.lastUpdate));\r\n        console.log(fleets);\r\n        setRows(fleets);\r\n    };\r\n    const goToFleet = (row) => {\r\n        console.log(row);\r\n        history.push(\"/fleet\", {fleet: row})\r\n    };\r\n    const history = useHistory();\r\n    return (\r\n        <div>\r\n            <header style={{marginLeft: \"30px\", fontSize: \"30px\"}}>\r\n                <p><b> Fleets</b></p>\r\n            </header>\r\n            <Grid container spacing={2} style={{padding: '30px'}}>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Id</TableCell>\r\n                                <TableCell align=\"right\">Name</TableCell>\r\n                                <TableCell align=\"right\">Description</TableCell>\r\n                                <TableCell align=\"right\">Healthy</TableCell>\r\n                                <TableCell align=\"right\">Disabled</TableCell>\r\n                                <TableCell align=\"right\">Unregistered</TableCell>\r\n                                <TableCell align=\"right\">Total Devices</TableCell>\r\n                                <TableCell align=\"right\">Last Update</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map((row) => (\r\n                                <TableRow key={row.name} onClick={() => goToFleet(row)}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.id}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{row.name}</TableCell>\r\n                                    <TableCell align=\"right\">{row.description}</TableCell>\r\n                                    <TableCell align=\"right\">{row.healthy}</TableCell>\r\n                                    <TableCell align=\"right\">{row.disabled}</TableCell>\r\n                                    <TableCell align=\"right\">{row.unregistered}</TableCell>\r\n                                    <TableCell align=\"right\">{row.totalDevices}</TableCell>\r\n                                    <TableCell align=\"right\">{row.lastUpdated}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        border: 0,\r\n        borderRadius: 3,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n});\r\n\r\nexport default function FleetInfo(props) {\r\n    const classes = useStyles();\r\n    const fleet = props.fleet;\r\n    return (\r\n        <Grid container spacing={0}>\r\n            <Grid item xs={6}>\r\n                <Card className={classes.root}>\r\n                    <CardContent>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            Fleet Info\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            Name: {fleet.name}\r\n                            <br/>\r\n                            Description: {fleet.description}\r\n                            <br/>\r\n                            <br/>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Card className={classes.root}>\r\n                    <CardContent>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            Total Devices: {Number(fleet.healthy) + Number(fleet.disabled) + Number(fleet.unregistered)}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            Healthy Devices: {Number(fleet.healthy)}\r\n                            <br/>\r\n                            Disabled Devices: {Number(fleet.disabled)}\r\n                            <br/>\r\n                            Unregistered Devices: {Number(fleet.unregistered)}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FleetInfo from \"./FleetInfo\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nfunction createData(endpoint, status, serialNumber, model, version, manufacturer, server, nextUpdate, fleet, tag, campaign, step, fotaStatus) {\r\n    return {\r\n        endpoint,\r\n        status,\r\n        serialNumber,\r\n        model,\r\n        version,\r\n        manufacturer,\r\n        server,\r\n        nextUpdate,\r\n        fleet,\r\n        tag,\r\n        campaign,\r\n        step,\r\n        fotaStatus\r\n    };\r\n}\r\n\r\nexport default function DeviceTable(props) {\r\n    console.log(props.location.state.fleet);\r\n    const fleet = props.location.state.fleet;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [rows, setRows] = useState([]);\r\n    useEffect(() => {\r\n            loadData()\r\n        }, []\r\n    );\r\n\r\n    const loadData = async () => {\r\n\r\n        const data = await fetch(\"https://ao1x7zyaj7.execute-api.us-east-1.amazonaws.com/DefStage/fleets/\" + fleet.id + \"/devices\", {\r\n            method: 'post',\r\n            headers: {'authorization': 'eyJraWQiOiJcLzl5Zjh0MFJOUVV3R0VRM1BGRmdmcDZENzNVeEdJSW9mUkJQaW94bDNXST0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjZDJlZTZlNy03Y2Y3LTRkYTctYWM0OS0xYjNhMTcwYmEwMzQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfWHFpcFRYdkUwIiwiY29nbml0bzp1c2VybmFtZSI6Imd1ZXN0IiwiYXVkIjoiY2lnYnBpNXU1b3A5YWNtZjQyNWp0M2dhcCIsImV2ZW50X2lkIjoiN2U5YzdmYmUtZTQ2Mi00NGZlLWE0M2YtZmJlMWFhMWUyNjAxIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1ODQwMjUyMDQsIm5hbWUiOiJHdWVzdCIsImFjY291bnRzIjoiMTI3IiwiZXhwIjoxNTg0MDI4ODA2LCJpYXQiOjE1ODQwMjUyMDYsImZhbWlseV9uYW1lIjoiT3BlbiIsImVtYWlsIjoiZ3Vlc3RAYWx0YWlyLXNlbWkuY29tIn0.MzubaZsihq2_p6xLKSvKcHrjrXdLGH16k3pPrshzpOy9WB2WEQTnDxPwBOz59SJsGx2LMKHqTCkmXBvxGPQN-zG1EQTJ420VVwilGfb-qxZ52ZGNVVK_S7w0VuU5fAiWkzf5Ugz5QVWp2dwj7bucnFQcr_JbMerfg-Z5lKZnExmy0F6dEhuvaJ_gybb7J2mrC8x9_caNgyrAH4j1JnCctN6Oum9svlouRBq6gewtXq-MyTlIRezcY3LRbr5NNDEIWBrCjLDK8QF4J2HZfpjkz_GXlt0zRraxpyyV7x7yjO8IUv9JrLdxfvTiW5gZ2A2y8AhDCBpj_XT-4-BljRWa-Q&publicKey=-----BEGIN%20PUBLIC%20KEY-----%0AMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwrxgjV8VAYzUUZ%2FqVLs4%0Ahm7bGW1Z9DVNW0vhW3nzgTLamPJPfTURU7xsviu6ew%2B3cDMXZdsOpFBXLL4c6Hm6%0Ae0JYRLKREVbdJlVOasFN4%2B4UZkJ5NCvU8ez9j7VP1tIsVBeZRRJNKyUaGp9MdZ0K%0Atk2YHlAbOtx73O5P7v7E8TgdEprEM43J%2BYcXFu6AeYbsGgvmH2KJMP8bfJyj8ynB%0A%2FvyC%2BfrjTIwVlYfREeAknVY7w4Q96TB2UKLO6PbI%2Bt6opoZzUPjlDDRarDCRvjtc%0AJiWvInoirMrATJ%2BK5G4ozquoL6FddYANbEa5Qgd57SW%2FBDOcNUM0xudKp3pbpOma%0AKwIDAQAB%0A-----END%20PUBLIC%20KEY-----%0A'},\r\n            body: JSON.stringify({numResults: 100})\r\n        });\r\n\r\n        let devices = await data.json();\r\n        console.log(devices);\r\n        devices = devices.data.map(device => createData(device.endpoint, device.regStatus, device.deviceInfo.serialNumber,\r\n            device.deviceInfo.modelNumber, device.deviceInfo.firmwareVersion, device.deviceInfo.manufacturer, device.server, device.nextUpdate, fleet.name, device.tag, device.campaign, device.step, device.fotaStatus));\r\n        console.log(devices);\r\n        setRows(devices);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={() => history.push(\"/\")}>\r\n                back\r\n            </Button>\r\n            <Grid container spacing={2} style={{padding: '30px'}}>\r\n                <FleetInfo fleet={props.location.state.fleet}/>\r\n                <Grid item xs={12}>\r\n                    <TableContainer component={Paper}>\r\n                        <Table className={classes.table} aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Endpoint</TableCell>\r\n                                    <TableCell align=\"right\">status</TableCell>\r\n                                    <TableCell align=\"right\">Serial Number</TableCell>\r\n                                    <TableCell align=\"right\">Model</TableCell>\r\n                                    <TableCell align=\"right\">Version</TableCell>\r\n                                    <TableCell align=\"right\">Manufacturer</TableCell>\r\n                                    <TableCell align=\"right\">Server</TableCell>\r\n                                    <TableCell align=\"right\">Updated</TableCell>\r\n                                    <TableCell align=\"right\">Next Update</TableCell>\r\n                                    <TableCell align=\"right\">Fleet</TableCell>\r\n                                    <TableCell align=\"right\">Tag</TableCell>\r\n                                    <TableCell align=\"right\">Campaign</TableCell>\r\n                                    <TableCell align=\"right\">Step</TableCell>\r\n                                    <TableCell align=\"right\">Fota Status</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {rows.map((row) => (\r\n                                    <TableRow key={row.name}>\r\n                                        {/* <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.name}\r\n                                    </TableCell>*/}\r\n                                        <TableCell align=\"right\">{row.endpoint}</TableCell>\r\n                                        <TableCell align=\"right\">{row.status}</TableCell>\r\n                                        <TableCell align=\"right\">{row.serialNumber}</TableCell>\r\n                                        <TableCell align=\"right\">{row.model}</TableCell>\r\n                                        <TableCell align=\"right\">{row.version}</TableCell>\r\n                                        <TableCell align=\"right\">{row.manufacturer}</TableCell>\r\n                                        <TableCell align=\"right\">{row.server}</TableCell>\r\n                                        <TableCell align=\"right\">{row.update}</TableCell>\r\n                                        <TableCell align=\"right\">{row.nextUpdate}</TableCell>\r\n                                        <TableCell align=\"right\">{row.fleet}</TableCell>\r\n                                        <TableCell align=\"right\">{row.tag}</TableCell>\r\n                                        <TableCell align=\"right\">{row.campaign}</TableCell>\r\n                                        <TableCell align=\"right\">{row.step}</TableCell>\r\n                                        <TableCell align=\"right\">{row.fotaStatus}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport FleetTable from \"./fleets/fleets\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Devices from \"./devices/Devices\";\n\n\nfunction App() {\n    return (\n        <Router>\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <Switch>\n                <Route path=\"/fleet\" component={(props) => Devices(props)}/>\n                <Route path=\"/\">\n                    <FleetTable/>\n                </Route>\n            </Switch>\n        </Router>\n\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}